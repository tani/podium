---
name: podium
description: POD parser and tool
---

=pod

=head1 Podium

=head2 Playground

You can try Podium in your browser at L<https://pod.deno.dev/>.

=head2 Description

This is a parser and tool for L<Plain Old Documentation (POD)|https://perldoc.perl.org/perlpod>.

=head2 Features

POD parser provides a convenient way to write documentation and comes with the
following features:

=over

=item * Easy-to-read syntax

=item * Multiple output formats (HTML, Markdown, LaTeX, Vimdoc)

=item * Command line interface for simple conversion

=item * Extensible for integration into other projects

=back

To get started using POD, download a file and follow
the usage instructions provided in the subsequent sections.

=head2 Installation

  $ wget https://pod.deno.dev/podium.lua
  $ chmod +x podium.lua

=head2 Usage

To use Podium, you can either use the WebAPI, the command line interface, or
the application programming interface.

=head3 WebAPI

WebAPI is available at L<https://pod.deno.dev/>.

  $ curl --data-binary @path/to/file.pod https://pod.deno.dev/markdown
  $ curl --data-binary `$(cat path/to/file.pod)` https://pod.deno.dev/html
  $ cat path/to/file.pod | curl --data-binary @- https://pod.deno.dev/latex

=head3 Command Line Interface

To run the command line interface, you need to install Lua.

  $ podium.lua markdown path/to/file.pod path/to/file.md   # write markdown
  $ podium.lua latex    path/to/file.pod path/to/file.tex  # write latex
  $ podium.lua vimdoc   path/to/file.pod path/to/file.txt  # write vimdoc
  $ podium.lua html     path/to/file.pod path/to/file.html # write html

  $ podium.lua html path/to/file.pod > path/to/file.html # wirte html to stdout
  $ podium.lua html < path/to/file.pod > path/to/file.html # write html to stdout, read pod from stdin

=head3 Application Programming Interface

If you want to use Podium in your own project, you can use the application
programming interface (API) to convert POD to HTML, Markdown, LaTeX, or Vimdoc.

  local podium = require('podium')
  local inputString = "..."
  local backend = podium.html -- or markdown, latex, vimdoc
  print(podium.process(backend, inputString)) -- process returns output string

=over

=item 1. Create a new C<PodiumProcessor> object,
  which takes an output format as an argument.

=item 2. Call the C<process> method on the PodiumProcessor object.

=back

To  customize the output, see below.

=head2 Customization

B<Example:>

  -- example.lua
  podium = dofile('podium.lua')

  -- customize the output
  podium.html:registerSimpleFormattingCode('B', function (text)
    return '<b style="font-weight: bold">' .. text .. '</b>'
  end)

  -- read file as string
  local inputString = io.open('path/to/file.pod'):read('*a')

  -- process the string
  local outputString = podium.process(podium.html, inputString)

  -- write the string to file
  io.open('path/to/file.html', 'w'):write(outputString)

Podium consists of the three components:

=over

=item * C<process> converts a string into another string using a C<PodiumBackend> instance.

=item * C<PodiumBackend> converts the tree structure into a string.

=item * C<PodiumElement> represents a node in the tree structure.

=back

Please be relaxed, you don't need to know the details of the tree structure.
You just need to arrange the simple string-to-string conversion.

You can customize the output by tweaking C<PodiumBackend> instance,
which has four methods for simple customization:

=head3 C<registerSimpleFormattingCode(self, name, fun)>

This method registers a simple formatting code, e.g., C<BE<lt>...E<gt>>.
C<name> is the name of the formatting code: the single capital letter.
C<fun> is a function that takes a string and returns a string.

  local podium = require('podium')
  local inputString = "..."
  local backend = podium.html -- or markdown, latex, vimdoc
  backend:registerSimpleFormattingCode('B', function (text)
    return '<b style="font-weight: bold">' .. text .. '</b>'
  end)
  print(podium.process(backend, inputString)) -- process returns output string

=head3 C<registerSimpleCommand(self, name, fun)>

This method registers a simple command, e.g., C<=head1 ...>.
C<name> is the name of the command defined in the POD document.
Please do not override C<=begin> and C<=end> commands.

  local podium = require('podium')
  local inputString = "..."
  local backend = podium.html -- or markdown, latex, vimdoc
  backend:registerSimpleCommand('head1', function (text)
    return '<h1 style="font-weight: bold">' .. text .. '</h1>'
  end)
  print(podium.process(backend, inputString)) -- process returns output string

=head3 C<registerSimpleDataParagraph(self, name, fun)>

This method registers a simple data paragraph, e.g., content between
C<=begin name> and C<=end name> commands.
C<name> is the name of the data paragraph, e.g., html or markdown.

  local podium = require('podium')
  local inputString = "..."
  local backend = podium.html -- or markdown, latex, vimdoc
  backend:registerSimpleDataParagraph('html', function (text)
    return '<div>' .. text .. '</div>'
  end)
  print(podium.process(backend, inputString)) -- process returns output string

=head3 C<registerSimple(self, name, fun)>

This method is used to register another simple conversion, e.g., preamble, and
postambles. C<name> is the name of the conversion, e.g., preamble, and
postambles. C<fun> is a function that takes a string and returns a string.
The function takes the entire input string as an argument for preamble and
postambles.

  local podium = require('podium')
  local inputString = "..."
  local backend = podium.html -- or markdown, latex, vimdoc
  backend
    :registerSimple('preamble', function (text)
      return '<html><body>'
    end)
    :registerSimple('postamble', function (text)
      return '</body></html>'
    end)
  print(podium.process(html, inputString)) -- process returns output string

=head2 JavaScript API

Podium is written in Lua, but you can use it in JavaScript as well.

  import {LuaFactory} from 'npm:wasmoon@latest';
  const luaFactory = new LuaFactory();
  const lua = await luaFactory.createEngine();
  const code = Deno.readTextFileSync('./lua/podium.lua').replace("#!/usr/bin/env lua", "")
  const pod = await lua.doString(code);

  // Arguments: backend name, node name, modifier function
  pod.PodiumBackend.registerSimpleDataParagraph("html", "red", (arg) => {
    return `<span style="color: red">${red}<span>`
  })

  // Arguments: backend name, input string
  // Returns: output string
  pod.process("html", "...")

=head2 License

Licensed under MIT License.

Copyright (c) 2022 TANIGUCHI Masaya

=cut
